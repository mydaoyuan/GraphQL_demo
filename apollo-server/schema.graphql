# Included scalars
scalar JSON
scalar Upload

# It will increment!
type Counter {
  # Number of increments
  count: Int!
  # Full message for testing
  countStr: String
}

# A text message send by users
type Message {
  id: ID!
  # Message content
  text: String!
}

# Input from user to create a message
input MessageInput {
  # Message content
  text: String!
}

type File {
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
}

type Tag {
  id: ID!
  label: String
}
type TagRes {
  id: ID!
  label: String
  error: Int
}
type Res {
  error: Int
}
input InputTag {
  id: ID!
  label: String
}

type Query {
  # Test query with a parameter
  # hello(name: String): String!
  tags: [Tag]
  # List of messages sent by users
  messages: [Message]
  uploads: [File]
  hello: String
  ping(message: String!): String
}

type Mutation {
  myMutation: String!
  addTag(label: String!): Tag
  delTag(id: ID!): Res
  updateTag(input: InputTag): TagRes
  # Add a message and publish it on 'messages' subscription channel
  addMessage(input: MessageInput!): Message!
  singleUpload(file: Upload!): File!
  multipleUpload(files: [Upload!]!): [File!]!
}

type Subscription {
  mySub: String!
  # This will update every 2 seconds
  counter: Counter!
  # When a new message is added
  messageAdded: Message!
}
